#pragma once

#include "declarations"
#include "platform_dependent"
#include <cstdint>
#include <initializer_list>
#include <cassert>
#include <cstring>

namespace Imagina {
	enum class PixelDataType : uint32_t {
		Invalid = 0x0,

		VectorSizeMask = 0xF000'0000,
		Vector2 = 0x1000'0000,
		Vector3 = 0x2000'0000,
		Vector4 = 0x3000'0000,

		// Integer
		// Signed
		Int8 = 0x10000,
		Int16,
		Int32,
		Int64,

		// Unsigned
		UInt8 = 0x10010,
		UInt16,
		UInt32,
		UInt64,

		// Fixed point
		// Fractional part, unsigned integers normalized to [0, 1) (divided by 2^bits)
		Fract8 = 0x20000,
		Fract16,
		Fract32,
		Fract64,

		// Color, unsigned integers normalized to [0, 1] (divided by 2^bits - 1)
		Monochrome8 = 0x30000,
		Monochrome16,

		// Floating point
		Float16 = 0x40000, // Reserved
		Float32,
		Float64,
		FloatHR,



		RG8 = Vector2 | Monochrome8,
		RG16 = Vector2 | Monochrome16,

		RGB8 = Vector3 | Monochrome8,
		RGB16 = Vector3 | Monochrome16,
		
		RGBA8 = Vector4 | Monochrome8,
		RGBA16 = Vector4 | Monochrome16,

		RGB16F = Vector3 | Float16,
		RGB32F = Vector3 | Float32,

		RGBA16F = Vector4 | Float16,
		RGBA32F = Vector4 | Float32,

		SRReal = Float64,
		HRReal = FloatHR,

		SRComplex = Vector2 | SRReal,
		HRComplex = Vector2 | HRReal,
	};

	struct FieldInfo {
		const char *Name;
		ptrdiff_t Offset;
		PixelDataType Type;
	};

	struct im_export PixelDataInfo {
		size_t Size;
		size_t FieldCount;
		const FieldInfo *Fields;

		const FieldInfo *FindField(const char *name) const;
	};

	class IPixelProcessor {
	public:
		virtual ~IPixelProcessor() = default;

		virtual void SetInput(const PixelDataInfo *info) = 0;
		virtual const PixelDataInfo *GetOutputInfo() = 0;

		virtual void Process(void *output, void *input) const = 0;
	};

	// A special case of SerialCompositeProcessor
	class im_export SerialCompositeProcessor2 : public IPixelProcessor {
		IPixelProcessor *processors[2];
		size_t intermediateDataSize = 0;

	public:
		SerialCompositeProcessor2(IPixelProcessor *first, IPixelProcessor *second) : processors{ first, second } { assert(first && second); }

		virtual void SetInput(const PixelDataInfo *info) override;
		virtual const PixelDataInfo *GetOutputInfo() override;
		virtual void Process(void *output, void *input) const override;
	};

	class im_export SerialCompositeProcessor : public IPixelProcessor {
		IPixelProcessor **processors;
		size_t processorCount;
		size_t intermediateDataSize = 0;

	public:
		SerialCompositeProcessor(std::initializer_list<IPixelProcessor *> processors);

		virtual void SetInput(const PixelDataInfo *info) override;
		virtual const PixelDataInfo *GetOutputInfo() override;
		virtual void Process(void *output, void *input) const override;
	};

	class im_export CopyProcessor : public IPixelProcessor {
		const PixelDataInfo *output;
		size_t dataSize;

	public:
		virtual void SetInput(const PixelDataInfo *info) override;
		virtual const PixelDataInfo *GetOutputInfo() override;
		virtual void Process(void *output, void *input) const override;
	};

	class im_export PixelPipeline final {
		IPixelProcessor *stages[4]{};
		const PixelDataInfo *outputs[4]{};

		IPixelProcessor *composite2[2]{};
		IPixelProcessor *composite3 = nullptr;

		bool linked = false;

	public:
		enum Stage : uint8_t {
			None = 0,
			Evaluated = 0,

			Preprocess = 1,
			Preprocessed = 1,

			Postprocess = 2,
			Postprocessed = 2,

			Colorize = 3,
			Colorized = 3,
		};

		~PixelPipeline() {
			delete composite2[0];
			delete composite2[1];
			delete composite3;
		}

		IPixelProcessor *GetCompositeProcessor(Stage first, Stage last);

		static constexpr bool StageValid(Stage stage) { return stage > Stage::None && stage <= Stage::Colorize; }

		bool Equivalent(Stage a, Stage b) { return outputs[a] == outputs[b]; }
		
		void UseEvaluator(IEvaluator evaluator);

		void UsePreprocessor(IPixelProcessor *processor);
		void UsePostprocessor(IPixelProcessor *processor);
		void UseColorizer(IPixelProcessor *processor);

		void Link();

		inline bool IsLinked() { return linked; }

		inline IPixelProcessor *GetPreprocessor()	{ return stages[1]; }
		inline IPixelProcessor *GetPostprocessor()	{ return stages[2]; }
		inline IPixelProcessor *GetColorizer()		{ return stages[3]; }

		inline size_t PreprocessedDataSize()	const { return outputs[1]->Size; }
		inline size_t PostprocessedDataSize()	const { return outputs[2]->Size; }
		inline size_t ColorizedDataSize()		const { return outputs[3]->Size; }

		const PixelDataInfo *GetOutputOfStage(Stage stage);
	};

	class im_export TestProcessor : public IPixelProcessor { // Converts Float64 to Float32
		static const PixelDataInfo OutputInfo;
		static const FieldInfo OutputFields[1];

		ptrdiff_t sourceOffset;

	public:
		virtual void SetInput(const PixelDataInfo *info) override;
		virtual const PixelDataInfo *GetOutputInfo() override;
		virtual void Process(void *output, void *input) const override;
	};

	class im_export TestProcessor2 : public IPixelProcessor {
		ptrdiff_t iterationsOffset;
		ptrdiff_t finalZOffset;

	public:
		virtual void SetInput(const PixelDataInfo *info) override;
		virtual const PixelDataInfo *GetOutputInfo() override;
		virtual void Process(void *output, void *input) const override;
	};
}