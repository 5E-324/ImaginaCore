#pragma once

#include <atomic>

#include "declarations"
#include "types"
#include "pixel_management"
#include "computation" // TODO: Replace with declarations

namespace Imagina {
	class BasicRasterizingInterface;
	class im_export BasicPixelManager : public IGpuPixelManager {
		friend class BasicRasterizingInterface;
		GRInt width = 0, height = 0;
		size_t pixelCount;
		static_assert(sizeof(std::atomic_size_t) == sizeof(size_t));
		std::atomic_size_t i = 0;
		IGpuTextureCreater *gpuTextureCreater = nullptr;
		IGpuTexture *gpuTexture = nullptr;
		PixelPipeline::Stage gpuTextureUploadPoint = PixelPipeline::Stage::None;
		IEvaluator *evaluator = nullptr;

		HRLocation location;

		ExecutionContext *executionContext = nullptr;

		bool initialized = false, valid = false;

		size_t preprocessedDataSize = 0;
		size_t finalDataSize = 0;

		char *preprocessedPixels = nullptr;
		float *finalPixels = nullptr; // Equal to preprocessedPixels when no preprocessing is needed

		PixelPipeline *pixelPipeline = nullptr;
		IPixelProcessor *preprocessor = nullptr;
		IPixelProcessor *finalProcessor = nullptr;
		CopyProcessor copyProcessor; // used as preprocessor if no preprocessor is provided

		void Initialize();

	public:
		virtual void ActivateGpu(IGpuTextureCreater *gpuTextureCreater) override;
		virtual void DeactivateGpu(bool cleanup = true) override;

		virtual void UsePixelPipeline(PixelPipeline *pipeline) override;
		virtual void GetPixelData(void *data, PixelPipeline::Stage stage) override;
		virtual void GetPixelData(void *data, PixelPipeline::Stage stage, const char *field) override;

		virtual void SetTextureUploadPoint(PixelPipeline::Stage uploadPoint) override;

		virtual void SetEvaluator(IEvaluator *evaluator) override;
		virtual void SetImmediateTarget(const HRLocation &location) override;
		virtual void SetResolution(GRInt width, GRInt height) override;
		virtual void InvalidatePixels() override;

		virtual void UpdateRelativeCoordinates(HRReal differenceX, HRReal differenceY) override;
		virtual void Update() override;

		virtual std::vector<TextureMapping> GetTextureMappings(const HRRectangle &location) override;

		void Cancel();
		void CancelAndWait();
		IRasterizingInterface GetRasterizingInterface();
		void FreeRasterizingInterface(IRasterizingInterface Interface);
	};

	class BasicRasterizingInterface {
		friend class BasicPixelManager;

		BasicPixelManager *pixelManager;
		PixelPipeline *pixelPipeline;
		BasicRasterizingInterface(BasicPixelManager *pixelManager) : pixelManager(pixelManager), pixelPipeline(pixelManager->pixelPipeline) {}

		int pixelX, pixelY;

	public:
		bool GetPixel(HRReal &x, HRReal &y);
		void GetDdx(HRReal &x, HRReal &y);
		void GetDdy(HRReal &x, HRReal &y);
		void WriteResults(void *value);
	};
}