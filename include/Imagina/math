#pragma once

#include <cmath>
#include <algorithm>
#include "floating_point"
#include "constants"
#include "complex"

namespace Imagina {
	using std::abs;
	using std::max;

	inline FloatF64eI64 abs(FloatF64eI64 x) {
		x.Mantissa = std::abs(x.Mantissa);
		return x;
	}

	inline FloatF64eI64 sqrt(FloatF64eI64 x) {
		FloatF64eI64 Result;
		Result.MantissaI64(x.MantissaI64() + ((x.Exponent & 1) << 52));
		Result.Exponent = x.Exponent >> 1;
		Result.Mantissa = std::sqrt(Result.Mantissa);
		Result.Normalize();
		return Result;
	}

	inline FloatF64eI64 hypot(FloatF64eI64 x, FloatF64eI64 y) {
		return sqrt(x * x + y * y);
	}

	template<typename T> inline T ManhattanHypot(const T &x, const T &y) {
		return abs(x) + abs(y);
	}

	template<typename T> inline T ChebyshevHypot(const T &x, const T &y) {
		return max(abs(x), abs(y));
	}

	template<typename T> inline T ManhattanNorm(const Complex<T> &x) {
		return ManhattanHypot(x.re, x.im);
	}

	template<typename T> inline T ChebyshevNorm(const Complex<T> &x) {
		return ChebyshevHypot(x.re, x.im);
	}
}