#pragma once

#include <stdint.h>
#include "declarations"
#include "multi-precision.h"

namespace Imagina {
	struct im_export FixedGeneric32 {
		static size_t DefaultSize;
		static constexpr uint32_t SignMask = 0x80000000;

		uint32_t *Value;
		size_t Size = DefaultSize;

		FixedGeneric32() : Value(new uint32_t[DefaultSize]) {}
		~FixedGeneric32() { delete[] Value; }

		FixedGeneric32(double x);
		FixedGeneric32(const FixedGeneric32 &x);
		FixedGeneric32(FixedGeneric32 &&x);

		FixedGeneric32 &operator=(const FixedGeneric32 &x);
		FixedGeneric32 &operator=(FixedGeneric32 &&x);

		bool IsNegative() const { return Value[Size - 1] & (1ull << 31) ? true : false; }

		operator double() const;

		FixedGeneric32 &operator+=(const FixedGeneric32 &x);
		FixedGeneric32 &operator-=(const FixedGeneric32 &x);
		FixedGeneric32 &operator*=(const FixedGeneric32 &x);
	};

	inline FixedGeneric32 operator+(FixedGeneric32 x, const FixedGeneric32 &y) { return x += y; }
	inline FixedGeneric32 operator-(FixedGeneric32 x, const FixedGeneric32 &y) { return x -= y; }
	inline FixedGeneric32 operator*(FixedGeneric32 x, const FixedGeneric32 &y) { return x *= y; }

	struct MPReal;

	struct MultiPrecisionMutable : _MultiPrecisionMutable {
		operator MultiPrecisionMutable *() { return this; }
		operator const MultiPrecisionMutable *() const { return this; }

		void Init(MPReal *x, MPBCUint precision) const;
		void InitCopy(MPReal *dst, const MPReal *src) const;

		void Clear(MPReal *x) const;
	};

	using MultiPrecision = const MultiPrecisionMutable;

	struct MPReal {
		const void *Content[7]; // This is for saving the contents of the actual number type (like mpf_t or mpfr_t)
		MultiPrecision *const MP = nullptr;

		MPReal() = default;
		//MPReal(MultiPrecision *mp, MPBCUint precision)				: MP(mp) { mp->InitContent(this, precision); }
		MPReal(double x, MultiPrecision *mp)						: MP(mp) { mp->InitContent(this, 53);			mp->SetDouble(this, x); }
		MPReal(double x, MultiPrecision *mp, MPBCUint precision)	: MP(mp) { mp->InitContent(this, precision);	mp->SetDouble(this, x); }
		//MPReal(const MPReal &x) : MP(x.MP) { MP->InitContent(this, x.GetPrecision()); MP->Set(this, x); }
		MPReal(const MPReal &x)										: MP(x.MP) { MP->InitContentCopy(this, x); }
		~MPReal() { if (MP) MP->ClearContent(this); }

		bool Valid() { return MP != nullptr; }

		operator MPReal *() { return this; }
		operator const MPReal *() const { return this; }

		MPReal &operator=(const MPReal &x) { MP->Set(this, x); return *this; } // Assign
		MPReal &operator&=(const MPReal &x); // Copy (set precision and assign)
		MPReal &operator|=(const MPReal &x); // Set MP and copy
		MPReal &operator=(double x) { MP->SetDouble(this, x); return *this; }

		explicit operator double() const { return MP->ToDouble(this); }

		MPBCUint GetPrecision() const { return MP->GetPrecision(this); }
		void SetPrecision(MPBCUint precision) { MP->SetPrecision(this, precision); }

		MPReal &operator+=(const MPReal &x) { MP->Add(this, this, x); return *this; }
		MPReal &operator-=(const MPReal &x) { MP->Sub(this, this, x); return *this; }
		MPReal &operator*=(const MPReal &x) { MP->Mul(this, this, x); return *this; }
		MPReal &operator/=(const MPReal &x) { MP->Div(this, this, x); return *this; }

		MPReal &operator+=(double x) { MP->Add(this, this, MPReal(x, MP)); return *this; }
		MPReal &operator-=(double x) { MP->Sub(this, this, MPReal(x, MP)); return *this; }
	};

	inline void MultiPrecisionMutable::Init(MPReal *x, MPBCUint precision) const {
		InitContent(x, precision);
		const_cast<MultiPrecision *&>(x->MP) = this;
	}

	inline void MultiPrecisionMutable::InitCopy(MPReal *dst, const MPReal *src) const {
		InitContentCopy(dst, src);
		const_cast<MultiPrecision *&>(dst->MP) = this;
	}

	inline void MultiPrecisionMutable::Clear(MPReal *x) const {
		ClearContent(x);
		const_cast<MultiPrecision *&>(x->MP) = nullptr;
	}

	// Copy operator. MPReal does not support bitwise and operation
	inline MPReal &MPReal::operator&=(const MPReal &x) {
		MP->Copy(this, x);
		return *this;
	}

	// Copy operator. (Re)init if needed. MPReal does not support bitwise or operation
	inline MPReal &MPReal::operator|=(const MPReal &x) {
		if (MP != x.MP) [[unlikely]] {
			if (MP) MP->ClearContent(this);

			x.MP->InitCopy(this, x);
		} else {
			MP->Copy(this, x);
		}
		return *this;
	}

	inline MPReal operator+(MPReal x, const MPReal &y) { return x += y; }
	inline MPReal operator-(MPReal x, const MPReal &y) { return x -= y; }
	inline MPReal operator*(MPReal x, const MPReal &y) { return x *= y; }
	inline MPReal operator/(MPReal x, const MPReal &y) { return x /= y; }

	extern im_export MultiPrecision MPDouble;
}