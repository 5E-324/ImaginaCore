#pragma once

#include <string_view>
#include "declarations"
#include "module.h"

namespace Imagina {
	enum class ComponentType : uint32_t {
		Evaluator		= IM_CT_Evaluator,
		LocationManager	= IM_CT_LocationManager,
		PixelProcessor	= IM_CT_PixelProcessor,
		PixelManager	= IM_CT_PixelManager,
		Controller		= IM_CT_Controller,
		MultiPrecision	= IM_CT_MultiPrecision,
		ModuleExtension	= IM_CT_ModuleExtension,
	};

	enum class ComponentFlag : uint32_t {
		UseCApi = IM_CF_UseCApi,
	};

	template<typename T> inline constexpr ComponentType TypeToComponentType = ComponentType(0);

	template<> inline constexpr ComponentType TypeToComponentType<IEvaluator> = ComponentType::Evaluator;
	template<> inline constexpr ComponentType TypeToComponentType<ILocationManager> = ComponentType::LocationManager;
	template<> inline constexpr ComponentType TypeToComponentType<IPixelProcessor> = ComponentType::PixelProcessor;
	template<> inline constexpr ComponentType TypeToComponentType<IPixelManager> = ComponentType::PixelManager;
	template<> inline constexpr ComponentType TypeToComponentType<IController> = ComponentType::Controller;
	template<> inline constexpr ComponentType TypeToComponentType<MultiPrecision> = ComponentType::MultiPrecision;

	struct Component;
	struct Module;

	im_export bool LoadModule(const char *filename);
	im_export bool LoadModules(const char *path, const char *extension);
	//im_export Component *GetComponent(std::string_view fullName);
	//im_export Component *GetComponent(ComponentTypeIndex type);

	im_export void *CreateComponent(ComponentType type);

	template<typename T>
	inline T *CreateComponent() {
		return (T *)CreateComponent(TypeToComponentType<T>);
	}
}