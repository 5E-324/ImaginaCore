#pragma once

#include <stdint.h>
#include <vector>
#include "declarations"
#include "types"
#include "pixel_processing"
#include "../../interfaces/pixel_management"

namespace Imagina {
	struct _GpuTexture;
	using GpuTexture = _GpuTexture *;

	class IGraphics {
	public:
		virtual ~IGraphics() = default;

		virtual GpuTexture CreateTexture() = 0;
		virtual void DeleteTexture(GpuTexture texture) = 0;

		virtual void SetTextureImage(GpuTexture texture, size_t width, size_t height, float *pixels) = 0; // TEMPORARY
		virtual void UpdateTextureImage(GpuTexture texture, size_t width, size_t height, float *pixels) = 0; // TEMPORARY
	};

	struct TextureMapping {
		GpuTexture Texture;
		GRRectangle TextureRectangle;
		HRRectangle FractalRectangle;
	};

	class IPixelManager {
	public:
		virtual ~IPixelManager() = default;

		virtual void SetEvaluator(IEvaluator *evaluator) = 0;
		virtual void UsePixelPipeline(PixelPipeline *pipeline) = 0;
		virtual void GetPixelData(void *data, PixelPipeline::Stage stage) = 0; // TODO: Add invertY
		virtual void GetPixelData(void *data, PixelPipeline::Stage stage, const char *field) = 0; // TODO: Add invertY

		virtual void SetImmediateTarget(const HRLocation &location) = 0;
		virtual void SetResolution(GRInt width, GRInt height) = 0;
		virtual void InvalidatePixels() = 0;

		virtual void UpdateRelativeCoordinates(HRReal differenceX, HRReal differenceY) = 0;
		virtual void Update() = 0;
	};

	class IGpuTextureManager {
	public:
		virtual ~IGpuTextureManager() = default;

		virtual void ActivateGpu(IGraphics *graphics) = 0;
		virtual void DeactivateGpu(bool cleanup = true) = 0;

		virtual void SetTextureUploadPoint(PixelPipeline::Stage uploadPoint) = 0;

		virtual std::vector<TextureMapping> GetTextureMappings(const HRRectangle &location) = 0; // Return type may change
	};

	class IGpuPixelManager : public IPixelManager, public IGpuTextureManager {};

	/*class im_export IRasterizer {
	public:
		virtual ~IRasterizer() = default;

		virtual void Cancel();

		virtual IRasterizingInterface GetRasterizingInterface() = 0;
		virtual void FreeRasterizingInterface(IRasterizingInterface Interface);
	};*/
}