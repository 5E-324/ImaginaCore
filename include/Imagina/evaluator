#pragma once

#include "types"
#include "declarations"
#include "computation" // TODO: Use declarations instead
#include "pixel_processing"
#include "evaluator.h"

namespace Imagina {
	class IEvaluator { // TODO: virtual void PrepareFor(const HRCircle &circle) = 0;
	public:
		virtual ~IEvaluator() = default;

		virtual const PixelDataInfo *GetOutputInfo() = 0;
		virtual void SetEvaluationParameters(const StandardEvaluationParameters &parameters) = 0; // TEMPORARY

		virtual bool Ready() = 0;
		virtual ExecutionContext *RunEvaluation(const HRCircle &circle, IRasterizer rasterizer) = 0;
	};

	struct StandardEvaluationParameters : _StandardEvaluationParameters {
		StandardEvaluationParameters() : _StandardEvaluationParameters{
			.Iterations = 1024,
			.DivergentEscapeRadius = 0x1.0p8,
			.ConvergentEscapeRadius = 0x1.0p-16,
		} {}
	};

	class StandardEvaluator : public IEvaluator {
	public:
		virtual void SetReferenceLocation(const HPReal &x, const HPReal &y, HRReal radius) = 0; // TEMPORARY
	};

	class im_export SimpleEvaluator : public StandardEvaluator {
		class EvaluationTask;

		ExecutionContext *precomputeExecutionContext = nullptr;
		ExecutionContext *pixelExecutionContext = nullptr;

		void CancelTasks();

	protected:
		HPReal x, y;
		HRReal radius;
		StandardEvaluationParameters parameters;

	public:
		virtual bool Ready() override final;
		virtual ExecutionContext *RunEvaluation(const HRCircle &circle, IRasterizer rasterizer) override final;
		virtual void SetReferenceLocation(const HPReal &x, const HPReal &y, HRReal radius) override final;
		virtual void SetEvaluationParameters(const StandardEvaluationParameters &parameters) override;

		virtual void Precompute() = 0;
		virtual void Evaluate(IRasterizingInterface rasterizingInterface) = 0;
	};

	class im_export LowPrecisionEvaluator : public StandardEvaluator {
		class LPRasterizingInterface;
		class EvaluationTask;
		friend struct IRasterizingInterfaceVTable;

		SRReal referenceX = 0.0, referenceY = 0.0;
		ExecutionContext *currentExecutionContext = nullptr;

	protected:
		StandardEvaluationParameters parameters;

	public:
		virtual bool Ready() override final;
		virtual ExecutionContext *RunEvaluation(const HRCircle &circle, IRasterizer rasterizer) override final;
		virtual void SetReferenceLocation(const HPReal &x, const HPReal &y, HRReal radius) override final;
		virtual void SetEvaluationParameters(const StandardEvaluationParameters &parameters) override;

		virtual void Evaluate(IRasterizingInterface rasterizingInterface) = 0;
	};

	class im_export TestSimpleEvaluator : public SimpleEvaluator {
		using real = SRReal;
		using complex = SRComplex;
		struct Output {
			double Value;
		};

		uint64_t referenceLength;
		//SRComplex reference[1025];
		//SRComplex *reference = nullptr;
		complex *reference = nullptr;
		//SRComplex referenceC;

	public:
		virtual const PixelDataInfo *GetOutputInfo() override;

		virtual void Precompute() override;
		virtual void Evaluate(IRasterizingInterface rasterizingInterface) override;
	};

	// TEMPORARY
	class im_export TestEvaluator : public LowPrecisionEvaluator {
		struct Output {
			uint64_t Iterations;
			SRComplex FinalZ;
		};

	public:
		virtual const PixelDataInfo *GetOutputInfo() override;

		virtual void Evaluate(IRasterizingInterface rasterizingInterface) override;
	};
}