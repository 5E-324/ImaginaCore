#pragma once

#include "declarations"
#include "evaluator"
#include "imagina.h"

namespace Imagina {
	class im_export LowPrecisionEvaluatorProxy : public LowPrecisionEvaluator {
		struct Output {
			double Value;
		};
		ImCApi::IEvaluator *instance;
		ImCApi::pIEvaluator_Release release;
		ImCApi::pIEvaluator_GetOutputInfo getOutputInfo;
		ImCApi::pComplexEvaluator_SetEvaluationParameters setEvaluationParameters;
		ImCApi::pLowPrecisionEvaluator_Evaluate evaluate;

		PixelDataInfo *outputInfo = nullptr;
	public:
		LowPrecisionEvaluatorProxy(
			ImCApi::IEvaluator *instance,
			ImCApi::pIEvaluator_Release release,
			ImCApi::pIEvaluator_GetOutputInfo getOutputInfo,
			ImCApi::pComplexEvaluator_SetEvaluationParameters setEvaluationParameters,
			ImCApi::pLowPrecisionEvaluator_Evaluate evaluate
		) : instance(instance), release(release), getOutputInfo(getOutputInfo), setEvaluationParameters(setEvaluationParameters), evaluate(evaluate) {}

		virtual ~LowPrecisionEvaluatorProxy() override;

		virtual const PixelDataInfo *GetOutputInfo() override;

		virtual void SetEvaluationParameters(const StandardEvaluationParameters &parameters) override;

		virtual void Evaluate(IRasterizingInterface &rasterizingInterface) override;
	};

	class im_export SimpleEvaluatorProxy : public SimpleEvaluator {
		ImCApi::IEvaluator *instance;
		ImCApi::pIEvaluator_Release release;
		ImCApi::pIEvaluator_GetOutputInfo getOutputInfo;
		ImCApi::pComplexEvaluator_SetEvaluationParameters setEvaluationParameters;
		ImCApi::pSimpleEvaluator_SetReferenceLocationAndPrecompute setReferenceLocationAndPrecompute;
		ImCApi::pSimpleEvaluator_Evaluate evaluate;

		PixelDataInfo *outputInfo = nullptr;

	public:
		SimpleEvaluatorProxy(
			ImCApi::IEvaluator *instance,
			ImCApi::pIEvaluator_Release release,
			ImCApi::pIEvaluator_GetOutputInfo getOutputInfo,
			ImCApi::pComplexEvaluator_SetEvaluationParameters setEvaluationParameters,
			ImCApi::pSimpleEvaluator_SetReferenceLocationAndPrecompute setReferenceLocationAndPrecompute,
			ImCApi::pLowPrecisionEvaluator_Evaluate evaluate
		) : instance(instance), release(release), getOutputInfo(getOutputInfo), setEvaluationParameters(setEvaluationParameters), setReferenceLocationAndPrecompute(setReferenceLocationAndPrecompute), evaluate(evaluate) {}

		virtual ~SimpleEvaluatorProxy() override;

		virtual const PixelDataInfo *GetOutputInfo() override;

		virtual void SetEvaluationParameters(const StandardEvaluationParameters &parameters) override;

		virtual void Precompute() override;
		virtual void Evaluate(IRasterizingInterface &rasterizingInterface) override;
	};
}